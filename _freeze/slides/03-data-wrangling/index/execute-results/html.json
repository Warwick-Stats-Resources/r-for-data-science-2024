{
  "hash": "66845bdaa149b545201ce8cc2850ffb4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Data Types, Structures and Wrangling\nsubtitle: R Foundations Course\nauthor: Heather Turner | Department of Statistics | University of Warwick\ntitle-slide-attributes:\n  data-background-color: \"#552D62\"\ndate: 2024-03-21\ndate-format: long\nformat: \n  warwickpres-revealjs:\n    execute:\n      echo: true\n      code-overflow: wrap\n---\n\n\n## Overview\n\n-   Data types\n\n-   Data structures\n\n-   Data import and wrangling\n\n## Assigning in R\n\nThe assignment operator in R is `<-`\n\nWe can create objects in R and assign them names:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- 1 + 3\n```\n:::\n\n\nThen we can inspect the objects we have created:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\nAnd use them further:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx + 5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n## Naming objects\n\n::: panel-tabset\n## forbidden\n\nObject names cannot:\n\n-   start with a number\n\n-   contain certain characters like `,` `-` `?`\n\n-   contain a space (unless in ``` `` ```, but that is not best practice)\n\n## good\n\n-   meaningful yet concise\n\n<!-- -->\n\n    day_one\n    day_1\n\n-   consistent\n\n<!-- -->\n\n    i_use_snake_case\n    other.people.use.periods\n    evenOthersUseCamelCase\n\nThe tidyverse has popularised the use of `snake_case`. Camel case is a better option for screen readers. The use of periods is discouraged because periods have other uses in R.\n\n## bad\n\n-   not meaningful\n\n<!-- -->\n\n    foo\n    bar\n\n-   unnecessarily long or difficult to read\n\n<!-- -->\n\n    first_day_of_month\n    dayone\n\n-   inconsistent\n:::\n\n## RStudio demo\n\nAssigning and environment pane.\n\nThere is an RStudio shortcut for `<-` which also puts spaces around it: \n\n<kbd>Alt</kbd>/<kbd title = \"option\">⌥</kbd> + <kbd title = \"minus\">-</kbd>\n\n:::.notes\ndemo of arrow\n:::\n\n# Data types and structures {.inverse}\n\n## Basic data types in R\n\n-   character: `\"a\"`, `\"hello, world!\"`\n\n-   double: `3`, `3.14`, `pi`\n\n-   integer: `3L` (the `L` tells R to store this as an interger)\n\n-   logical: `TRUE` and `FALSE`\n\n-   complex: `3+2i`. N.B. need to write `1i` for $\\sqrt(-1)$.\n\n-   raw: holds raw bytes (rarely used)\n\nN.B. double and integer types are both numeric\n\n:::.notes\ndouble: \n  - floating-point numbers\n  - double the precision of a float!\n  - has precision of 15 decimal places\n  - stored in 64 bits\nlong\n  - integer stored in 4 bytes = 32 bits, so -2^31 - (2^31 - 1)\n:::\n\n## Special values\n\n-   `NA`: The value `NA` is given to any data which R knows to be missing. It is not a character string, i.e. it is different to `\"NA\"`\n\n-   `Inf`: Positive infinity, e.g. the result of dividing a non-zero number by zero\n\n-   `NaN`: Not a number, e.g. attempting to find the logarithm of a negative number\n\n-   `NULL`: The null object. Often returned by expressions and functions whose value is undefined\n\n## Data structures\n\nData structures are the building blocks of R code.\n\nIn R, the main types of structures are\n\n-   vectors\n\n-   factors\n\n-   matrices and arrays\n\n-   lists\n\n-   data frames\n\nFocus today on vectors, factors and data frames.\n\n## Vectors\n\nA single number is a special case of a numeric vector. Vectors of length greater than one can be created using the concatenate function, `c`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- c(1, 3, 6)\nfruits <- c(\"apple\", \"pear\")\n```\n:::\n\n\nThe elements of the vector must be of the same type: common types are numeric, character and logical.\n\nThere are built-in functions for getting information about vectors, e.g.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlength(fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n## Creating vectors\n\nThere are some useful shortcuts for certain types of vector:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\nseq(from = 3, to = 5, by = 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3.0 3.5 4.0 4.5 5.0\n```\n\n\n:::\n\n```{.r .cell-code}\nLETTERS\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n```\n\n\n:::\n:::\n\n\nWhat do you think `letters` returns?\n\n## Subsetting vectors\n\nWe subset vectors using `[]`:\n\n-   By position, starting at 1\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nletters[c(1, 5, 9, 15, 21)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\" \"e\" \"i\" \"o\" \"u\"\n```\n\n\n:::\n:::\n\n\n-   By logical vector\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- c(5, 3, 6, 1)\nx[c(TRUE, FALSE, TRUE, FALSE)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 6\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx[x > 4]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 6\n```\n\n\n:::\n:::\n\n\n## Your turn!\n\n- In your R-Foundations project from the last session, create and save a new script called data-types.R\n\n- Look at the help page for the `rep()` function: `?rep`\n\n- Starting with the vector `x <- c(1,3,6)`, can you make the following patterns:\n\n  - 1, 3, 6, 1, 3, 6\n  - 1, 1, 3, 3, 6, 6\n  - 1, 1, 3, 3, 6, 6, 1, 1, 3, 3, 6, 6\n  \n- What does `rep(x, 2, 2)` give? Is it what you expected? Can you explain the output?\n  \n::: {.notes}\nrep(x, 2) or rep(x, times = 2)\nrep(x, each = 2)\nrep(x, 2, each = 2)\nrep(x, 2, 2) is rep(x, times = 2, length.out = 2)\n:::\n\n## Factors\n\nFactors are used to represent categorical data. They can be ordered or unordered.\n\nFactors are stored as integers, and have labels associated with these unique integers. While factors usually look (and often behave) like character vectors, they are actually integers under the hood, and you need to be careful when treating them like strings.\n\n## Factors\n\nOnce created, factors can only contain a pre-defined set values, known as levels. By default, R always sorts levels in alphabetical order. For instance, if you have a factor with 2 levels:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfruits <- factor(c(\"apple\", \"apple\", \"pear\"))\nfruits\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] apple apple pear \nLevels: apple pear\n```\n\n\n:::\n\n```{.r .cell-code}\nstr(fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 2 levels \"apple\",\"pear\": 1 1 2\n```\n\n\n:::\n:::\n\n\nThe [**forcats**](https://forcats.tidyverse.org){target=\"_blank\"} package from the tidyverse has many functions for dealing with factors.\n\n## Data frames\n\nData sets are stored in R as *data frames*\n\nThese are structured as a list of objects, typically vectors, of the same length.\n\n:::{.smaller90}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nstr(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [344 × 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n```\n\n\n:::\n:::\n\n:::\n\n## tibbles\n\nFrom the [tibble](https://tibble.tidyverse.org){target=\"_blank\"} page:\n\n> A **tibble**, or `tbl_df`, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e. they don't change variable names or types, and don't do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects.\n\n## Creating data frames\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n`my numbers` <- 1:9\nfruits <- rep(c(\"apple\", \"pear\", \"orange\"), 3)\n```\n:::\n\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata.frame(`my numbers`, \n           fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  my.numbers fruits\n1          1  apple\n2          2   pear\n3          3 orange\n4          4  apple\n5          5   pear\n6          6 orange\n7          7  apple\n8          8   pear\n9          9 orange\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntibble(`my numbers`, \n       fruits)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 2\n  `my numbers` fruits\n         <int> <chr> \n1            1 apple \n2            2 pear  \n3            3 orange\n4            4 apple \n5            5 pear  \n6            6 orange\n7            7 apple \n8            8 pear  \n9            9 orange\n```\n\n\n:::\n:::\n\n:::\n:::\n\nSpot the differences!\n\n## Import dataset (button)\n\nUsing the Import Dataset dialog in RStudio\n\n![](images/import_dataset.png){fig-align=\"center\"}\n\nwe can import files stored locally or online in the following formats:\n\n-   `.txt`/`.csv` via `read_delim`/`read_csv` from **readr**.\n-   `.xlsx` via `read_excel` from **readxl**.\n-   `.sav/.por` , `.sas7bdat` and `.dta` via `read_spss`, `read_sas` and `read_stata` respectively from **haven**.\n\nMost of these functions also allow files to be compressed, e.g. as `.zip`.\n\n## File names and paths and project structure\n\nIt's REALLY important to have good file names and paths, and a good project structure.\n\nI leave you in the extremely capable hand of Danielle Navarro to take you thoroughly through best practices:\n\n<https://djnavarro.net/slides-project-structure/#1>\n\nI also HIGHLY recommend you check out the [**here**](https://here.r-lib.org){target=\"_blank\"} package, which enables easy file referencing in [project-oriented workflows](https://rstats.wtf/project-oriented-workflow.html){target=\"_blank\"}.\n\n## Import data (code)\n\nThe **rio** package provides a common interface to the functions used by *Import Dataset* as well as many others.\n\nThe data format is automatically recognised from the file extension. To read the data in as a tibble, we use the setclass argument.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(rio)\npenguins_lter <- import(\"data/penguins_lter.csv\")\npenguins_lter_tbl <- import(\"data/penguins_lter.csv\", setclass = \"tibble\")\n```\n:::\n\n\nSee `?rio` for the underlying functions used for each format and the corresponding optional arguments, e.g. the skip argument to `read_excel` to skip a certain number of rows.\n\n## Import data demo\n\nShow both button (in Environment and from the file itself) and code\n\n- From file\n\n  - `data/penguins_lter.csv`\n\n- From URL \n\n  - [<https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-09/wheels.csv>]{.smaller60}\n  \n- Your turn!\n\n:::.notes\nShow right-click on file name in file pane to import that way\nOption to View() or not after import\nWhen import wheels from URL, show how to skip column by right-clicking on column header\n:::\n\n# Data wrangling {background-color=\"#552D62\"}\n\n## dplyr\n\nThe **dplyr** package (part of the tidyverse) provides the following key functions to operate on data frames:\n\n-   `filter()`\n-   `arrange()`\n-   `select()`\n-   `mutate()`\n-   `summarise()`   \n\nThey all take a data frame as their first argument. The subsequent arguments describe what to do with the data frame. The result is a new data frame.\n\n## Load packages\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(palmerpenguins)\n```\n:::\n\n\n## `filter()`: pick rows based on values of observations.\n\n::: panel-tabset\n## Example\n\n:::{.smaller90}\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfilter(penguins, \n       species == \"Gentoo\", \n       bill_length_mm > 48 & bill_depth_mm > 15, \n       !is.na(sex))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 39 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>           <dbl>         <dbl>             <int>       <int>\n 1 Gentoo  Biscoe           50            16.3               230        5700\n 2 Gentoo  Biscoe           50            15.2               218        5700\n 3 Gentoo  Biscoe           49            16.1               216        5550\n 4 Gentoo  Biscoe           49.3          15.7               217        5850\n 5 Gentoo  Biscoe           49.2          15.2               221        6300\n 6 Gentoo  Biscoe           48.7          15.1               222        5350\n 7 Gentoo  Biscoe           50            15.3               220        5550\n 8 Gentoo  Biscoe           59.6          17                 230        6050\n 9 Gentoo  Biscoe           48.4          16.3               220        5400\n10 Gentoo  Biscoe           48.7          15.7               208        5350\n# ℹ 29 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n:::\n\n## Notes\n\n-   variable names are unquoted\n\n-   building blocks of conditions:\n\n| Building block     | R code                           |\n|--------------------|----------------------------------|\n| Binary comparisons | `>`, `<`, `==`, `<=`, `>=`, `!=` |\n| Logical operators  | or `|`, and `&`, not `!`         |\n| Value matching     | e.g. `x %in% 6:9`                |\n| Missing indicator  | e.g. `is.na(x)`                  |\n:::\n\n## `select()`: select variables (columns) in a dataset\n\n::: panel-tabset\n## Example 1\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(penguins, bill_length_mm, bill_depth_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            <dbl>         <dbl>\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n## Example 2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(penguins, bill_length_mm:body_mass_g)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 4\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n            <dbl>         <dbl>             <int>       <int>\n 1           39.1          18.7               181        3750\n 2           39.5          17.4               186        3800\n 3           40.3          18                 195        3250\n 4           NA            NA                  NA          NA\n 5           36.7          19.3               193        3450\n 6           39.3          20.6               190        3650\n 7           38.9          17.8               181        3625\n 8           39.2          19.6               195        4675\n 9           34.1          18.1               193        3475\n10           42            20.2               190        4250\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n## Example 3\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(penguins, starts_with(\"bill\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   bill_length_mm bill_depth_mm\n            <dbl>         <dbl>\n 1           39.1          18.7\n 2           39.5          17.4\n 3           40.3          18  \n 4           NA            NA  \n 5           36.7          19.3\n 6           39.3          20.6\n 7           38.9          17.8\n 8           39.2          19.6\n 9           34.1          18.1\n10           42            20.2\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n## Example 4\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nselect(penguins, where(is.numeric))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 5\n   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n            <dbl>         <dbl>             <int>       <int> <int>\n 1           39.1          18.7               181        3750  2007\n 2           39.5          17.4               186        3800  2007\n 3           40.3          18                 195        3250  2007\n 4           NA            NA                  NA          NA  2007\n 5           36.7          19.3               193        3450  2007\n 6           39.3          20.6               190        3650  2007\n 7           38.9          17.8               181        3625  2007\n 8           39.2          19.6               195        4675  2007\n 9           34.1          18.1               193        3475  2007\n10           42            20.2               190        4250  2007\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n## Note\n\nThere are several other selectors. See `?dplyr::select` or [online](https://dplyr.tidyverse.org/reference/select.html){target=\"_blank\"} for further details.\n:::\n\n## A note about pipes: `|>` vs `%>%`\n\nPipes pass what comes before into an argument (by default the first) of what comes after.\n\nPipes are a powerful tool for clearly expressing a sequence of multiple operations.\n\n::: columns\n::: {.column width=\"50%\"}\n### `|>`\n\n-   The 'native' pipe, built into base R since v4.1 (May 2021)\n-   Improved in v4.2 (April 2022)\n:::\n\n::: {.column width=\"50%\"}\n### `%>%`\n\n-   Has been around in the **magrittr** package since 2014\n-   Used throughout the tidyverse (though that is changing)\n:::\n:::\n\n## Pipes: similarity\n\nBy default, a pipe takes what comes before and pass it to first argument of what comes after.\n\n::: panel-tabset\n### Example 1\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlog(2, base = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.30103\n```\n\n\n:::\n\n```{.r .cell-code}\n2 %>% log(base = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.30103\n```\n\n\n:::\n\n```{.r .cell-code}\n2 |> log(base = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.30103\n```\n\n\n:::\n:::\n\n\n### Example 2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npaste(\"a\", \"b\", \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a b c\"\n```\n\n\n:::\n\n```{.r .cell-code}\n\"a\" %>% paste(\"b\", \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a b c\"\n```\n\n\n:::\n\n```{.r .cell-code}\n\"a\" |> paste(\"b\", \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a b c\"\n```\n\n\n:::\n:::\n\n:::\n\n## Pipes: key difference\n\nSo far, so good, but what if we want to pipe into a subsequent argument?\n\n::: panel-tabset\n### Example 1\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlog(2, 10) ## don't need to name the argument\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.30103\n```\n\n\n:::\n\n```{.r .cell-code}\n10 %>% log(2, .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.30103\n```\n\n\n:::\n\n```{.r .cell-code}\n10 |> log(2, base = _)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.30103\n```\n\n\n:::\n:::\n\n\n### Example 2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npaste(\"a\", \"b\", \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a b c\"\n```\n\n\n:::\n\n```{.r .cell-code}\n\"b\" %>% paste(\"a\", ., \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a b c\"\n```\n\n\n:::\n\n```{.r .cell-code}\n\"b\" |> paste(\"a\", ..2 = _, \"c\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a b c\"\n```\n\n\n:::\n:::\n\n:::\n\nDifferent placeholder (`.` vs `_`) and with native pipe need a named argument\n\n## Pipe keyboard shortcut\n\nThere is an RStudio shortcut for the pipe which also puts spaces around it: \n\n<kbd>Ctrl</kbd>/<kbd title = \"Command\">⌘</kbd> + <kbd title = \"Shift\">⇧</kbd> + <kbd>M</kbd>.\n\nThis can be set to either `%>%` or `|>` in the RStudio preferences.\n\nGo to Tools -> Global Options -> Code and check/uncheck box for \"Use native pipe operator\".\n\n## `arrange()`: change the ordering of rows\n\n::: panel-tabset\n## Example 1\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  select(species, sex, flipper_length_mm) |>\n  arrange(flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species   sex    flipper_length_mm\n   <fct>     <fct>              <int>\n 1 Adelie    female               172\n 2 Adelie    female               174\n 3 Adelie    female               176\n 4 Adelie    female               178\n 5 Adelie    male                 178\n 6 Adelie    female               178\n 7 Chinstrap female               178\n 8 Adelie    <NA>                 179\n 9 Adelie    <NA>                 180\n10 Adelie    male                 180\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n## Example 2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  select(species, sex, flipper_length_mm) |>\n  arrange(species, flipper_length_mm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species sex    flipper_length_mm\n   <fct>   <fct>              <int>\n 1 Adelie  female               172\n 2 Adelie  female               174\n 3 Adelie  female               176\n 4 Adelie  female               178\n 5 Adelie  male                 178\n 6 Adelie  female               178\n 7 Adelie  <NA>                 179\n 8 Adelie  <NA>                 180\n 9 Adelie  male                 180\n10 Adelie  male                 180\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n## Example 3\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  select(species, sex, flipper_length_mm) |>\n  arrange(desc(flipper_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 3\n   species sex   flipper_length_mm\n   <fct>   <fct>             <int>\n 1 Gentoo  male                231\n 2 Gentoo  male                230\n 3 Gentoo  male                230\n 4 Gentoo  male                230\n 5 Gentoo  male                230\n 6 Gentoo  male                230\n 7 Gentoo  male                230\n 8 Gentoo  male                230\n 9 Gentoo  male                229\n10 Gentoo  male                229\n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n:::\n\n## `mutate()`: create and modify columns\n\n::: panel-tabset\n## Example 1\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  select(bill_length_mm) |>\n  mutate(bill_length_mm_sq = bill_length_mm^2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 2\n   bill_length_mm bill_length_mm_sq\n            <dbl>             <dbl>\n 1           39.1             1529.\n 2           39.5             1560.\n 3           40.3             1624.\n 4           NA                 NA \n 5           36.7             1347.\n 6           39.3             1544.\n 7           38.9             1513.\n 8           39.2             1537.\n 9           34.1             1163.\n10           42               1764 \n# ℹ 334 more rows\n```\n\n\n:::\n:::\n\n\n## Example 2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  filter(species == \"Gentoo\") |>\n  select(sex, flipper_length_mm) |>\n  mutate(size = if_else(flipper_length_mm > 217, \"big\", \"small\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 124 × 3\n   sex    flipper_length_mm size \n   <fct>              <int> <chr>\n 1 female               211 small\n 2 male                 230 big  \n 3 female               210 small\n 4 male                 218 big  \n 5 male                 215 small\n 6 female               210 small\n 7 female               211 small\n 8 male                 219 big  \n 9 female               209 small\n10 male                 215 small\n# ℹ 114 more rows\n```\n\n\n:::\n:::\n\n\n## Example 3\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  select(bill_length_mm) |>\n  filter(!is.na(bill_length_mm)) |>\n  mutate(bill_length_mm_cumsum = cumsum(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 342 × 2\n   bill_length_mm bill_length_mm_cumsum\n            <dbl>                 <dbl>\n 1           39.1                  39.1\n 2           39.5                  78.6\n 3           40.3                 119. \n 4           36.7                 156. \n 5           39.3                 195. \n 6           38.9                 234. \n 7           39.2                 273  \n 8           34.1                 307. \n 9           42                   349. \n10           37.8                 387. \n# ℹ 332 more rows\n```\n\n\n:::\n:::\n\n:::\n\n## `summarise()`: reduces multiple values down to a single summary\n\n::: panel-tabset\n## Example 1\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  summarise(mean(body_mass_g, na.rm = TRUE))  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  `mean(body_mass_g, na.rm = TRUE)`\n                              <dbl>\n1                             4202.\n```\n\n\n:::\n:::\n\n\n## Example 2\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  group_by(species, sex) |>\n  filter(!is.na(sex)) |>\n  summarise(mean = mean(body_mass_g, na.rm = TRUE)) |>  # give column a name\n  ungroup() # best practice after group_by()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  species   sex     mean\n  <fct>     <fct>  <dbl>\n1 Adelie    female 3369.\n2 Adelie    male   4043.\n3 Chinstrap female 3527.\n4 Chinstrap male   3939.\n5 Gentoo    female 4680.\n6 Gentoo    male   5485.\n```\n\n\n:::\n:::\n\n\n## Example 3\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  filter(!is.na(sex)) |>\n  summarise(mean = mean(body_mass_g, na.rm = TRUE),\n            .by = c(species, sex)) # new in dplyr 1.1.0, note the `.`\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  species   sex     mean\n  <fct>     <fct>  <dbl>\n1 Adelie    male   4043.\n2 Adelie    female 3369.\n3 Gentoo    female 4680.\n4 Gentoo    male   5485.\n5 Chinstrap female 3527.\n6 Chinstrap male   3939.\n```\n\n\n:::\n:::\n\n\n## Example 4: count\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  count(species, island)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  species   island        n\n  <fct>     <fct>     <int>\n1 Adelie    Biscoe       44\n2 Adelie    Dream        56\n3 Adelie    Torgersen    52\n4 Chinstrap Dream        68\n5 Gentoo    Biscoe      124\n```\n\n\n:::\n:::\n\n\nShortcut for\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  summarise(n = n(), .by = c(species, island))\n```\n:::\n\n\n:::\n\n::: {.notes}\ncount() and summarise(n = n()) give different orderings  \ncount() drops zero counts\n:::\n\n## Your turn!\n\n- Explore the `wheels` data!\n\n- Be ready to share some of your code after the exercise!\n\n## tidydatatutor.com\n\n[Tidy Data Tutor](https://tidydatatutor.com){target=\"_blank\"} lets you write R and Tidyverse code in your browser and see how your data frame changes at each step of a data analysis pipeline.\n\nDEMO\n\n# End matter {background-color=\"#552D62\"}\n\n## Additional resources\n\n- [RStudio cheatsheets](https://www.rstudio.com/resources/cheatsheets/){target=\"_blank\"}\n\n- [R for data science book](https://r4ds.had.co.nz){target=\"_blank\"}\n\n- [**ferriswheels**](https://github.com/EmilHvitfeldt/ferriswheels){target=\"_blank\"}\n\n## Sources\n\nMaterial inspired by and remixed from:\n\n-   <https://stat545.com/r-basics.html>\n-   <https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/>\n-   <https://slides.silviacanelon.com/tour-of-the-tidyverse-v2/>\n-   <https://www.heatherturner.net/teaching/zero-to-hero/>\n-   <http://adv-r.had.co.nz/Style.html>\n\n## License\n\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target=\"_blank\"}).\n\n\n\n```{=html}\n<!-- needs to be last chunk of presentation otherwise creates an extra slide -->\n<!-- requires Quarto v1.3 -->\n<!-- tint80 for border, tint20 for title -->\n<!-- this should hopefully no longer be necessary in Quarto 1.4 -->\n<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->\n<style type=\"text/css\">\ndiv.callout-note {\n  border-left-color: #336695 !important;\n}\n\ndiv.callout-note.callout-style-default .callout-title {\n  background-color: #CCD9E4 !important;\n}\n\ndiv.callout-caution {\n  border-left-color: #AE4240 !important;\n}\n\ndiv.callout-caution.callout-style-default .callout-title {\n  background-color: #ebd0cf !important;\n}\n\ndiv.callout-tip {\n  border-left-color: #618157 !important;\n}\n\ndiv.callout-tip.callout-style-default .callout-title {\n  background-color: #d8e0d5 !important;\n}\n\ndiv.callout-important {\n  border-left-color: #775781 !important;\n}\n\ndiv.callout-important.callout-style-default .callout-title {\n  background-color: #ddd5e0 !important;\n}\n\ndiv.callout-warning {\n  border-left-color: #956133 !important;\n}\n\ndiv.callout-warning.callout-style-default .callout-title {\n  background-color: #e4d8cc !important;\n}\n</style>\n```\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}