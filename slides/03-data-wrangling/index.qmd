---
title: Data Types, Structures and Wrangling
subtitle: R for Data Science
author: Heather Turner | Department of Statistics | University of Warwick
title-slide-attributes:
  data-background-color: "#552D62"
date: 2024-03-21
date-format: long
format: 
  warwickpres-revealjs:
    execute:
      echo: true
      code-overflow: wrap
---

## Overview

-   Data types

-   Data structures

-   Data import and wrangling

## Assigning in R

The assignment operator in R is `<-`

We can create objects in R and assign them names:

```{r}
x <- 1 + 3
```

Then we can inspect the objects we have created:

```{r}
x
```

And use them further:

```{r}
x + 5
```

## Naming objects

::: panel-tabset
## forbidden

Object names cannot:

-   start with a number

-   contain certain characters like `,` `-` `?`

-   contain a space (unless in ``` `` ```, but that is not best practice)

## good

-   meaningful yet concise

<!-- -->

    day_one
    day_1

-   consistent

<!-- -->

    i_use_snake_case
    other.people.use.periods
    evenOthersUseCamelCase

The tidyverse has popularised the use of `snake_case`. Camel case is a better option for screen readers. The use of periods is discouraged because periods have other uses in R.

## bad

-   not meaningful

<!-- -->

    foo
    bar

-   unnecessarily long or difficult to read

<!-- -->

    first_day_of_month
    dayone

-   inconsistent
:::

## RStudio demo

Assigning and environment pane.

There is an RStudio shortcut for `<-` which also puts spaces around it: 

<kbd>Alt</kbd>/<kbd title = "option">⌥</kbd> + <kbd title = "minus">-</kbd>

:::{.notes}
demo of arrow
:::

# Data types and structures {.inverse}

## Basic data types in R

-   character: `"a"`, `"hello, world!"`

-   double: `3`, `3.14`, `pi`

-   integer: `3L` (the `L` tells R to store this as an interger)

-   logical: `TRUE` and `FALSE`

-   complex: `3+2i`. N.B. need to write `1i` for $\sqrt(-1)$.

-   raw: holds raw bytes (rarely used)

N.B. double and integer types are both numeric

:::{.notes}
double: 
  - floating-point numbers
  - double the precision of a float!
  - has precision of 15 decimal places
  - stored in 64 bits
long
  - integer stored in 4 bytes = 32 bits, so -2^31 - (2^31 - 1)
:::

## Special values

-   `NA`: The value `NA` is given to any data which R knows to be missing. It is not a character string, i.e. it is different to `"NA"`

-   `Inf`: Positive infinity, e.g. the result of dividing a non-zero number by zero

-   `NaN`: Not a number, e.g. attempting to find the logarithm of a negative number

-   `NULL`: The null object. Often returned by expressions and functions whose value is undefined

## Data structures

Data structures are the building blocks of R code.

In R, the main types of structures are

-   vectors

-   factors

-   matrices and arrays

-   lists

-   data frames

Focus today on vectors, factors and data frames.

## Vectors

A single number is a special case of a numeric vector. Vectors of length greater than one can be created using the concatenate function, `c`.

```{r}
x <- c(1, 3, 6)
fruits <- c("apple", "pear")
```

The elements of the vector must be of the same type: common types are numeric, character and logical.

There are built-in functions for getting information about vectors, e.g.

```{r}
length(fruits)
```

## Creating vectors

There are some useful shortcuts for certain types of vector:

```{r}
1:5
seq(from = 3, to = 5, by = 0.5)
LETTERS
```

What do you think `letters` returns?

## Subsetting vectors

We subset vectors using `[]`:

-   By position, starting at 1

```{r}
letters[c(1, 5, 9, 15, 21)]
```

-   By logical vector

```{r}
x <- c(5, 3, 6, 1)
x[c(TRUE, FALSE, TRUE, FALSE)]
```

```{r}
x[x > 4]
```

## Your turn!

- In your R-Foundations project from the last session, create and save a new script called data-types.R

- Look at the help page for the `rep()` function: `?rep`

- Starting with the vector `x <- c(1,3,6)`, can you make the following patterns:

  - 1, 3, 6, 1, 3, 6
  - 1, 1, 3, 3, 6, 6
  - 1, 1, 3, 3, 6, 6, 1, 1, 3, 3, 6, 6
  
- What does `rep(x, 2, 2)` give? Is it what you expected? Can you explain the output?
  
::: {{.notes}}
rep(x, 2) or rep(x, times = 2)
rep(x, each = 2)
rep(x, 2, each = 2)
rep(x, 2, 2) is rep(x, times = 2, length.out = 2)
:::

## Factors

Factors are used to represent categorical data. They can be ordered or unordered.

Factors are stored as integers, and have labels associated with these unique integers. While factors usually look (and often behave) like character vectors, they are actually integers under the hood, and you need to be careful when treating them like strings.

## Factors

Once created, factors can only contain a pre-defined set values, known as levels. By default, R always sorts levels in alphabetical order. For instance, if you have a factor with 2 levels:

```{r}
fruits <- factor(c("apple", "apple", "pear"))
fruits
str(fruits)
```

The [**forcats**](https://forcats.tidyverse.org){target="_blank"} package from the tidyverse has many functions for dealing with factors.

## Data frames

Data sets are stored in R as *data frames*

These are structured as a list of objects, typically vectors, of the same length.

:::{.smaller90}
```{r}
#| message: false
library(tidyverse)
library(palmerpenguins)
str(penguins)
```
:::

## tibbles

From the [tibble](https://tibble.tidyverse.org){target="_blank"} page:

> A **tibble**, or `tbl_df`, is a modern reimagining of the data.frame, keeping what time has proven to be effective, and throwing out what is not. Tibbles are data.frames that are lazy and surly: they do less (i.e. they don't change variable names or types, and don't do partial matching) and complain more (e.g. when a variable does not exist). This forces you to confront problems earlier, typically leading to cleaner, more expressive code. Tibbles also have an enhanced print() method which makes them easier to use with large datasets containing complex objects.

## Creating data frames

```{r}
`my numbers` <- 1:9
fruits <- rep(c("apple", "pear", "orange"), 3)
```

::: columns
::: {.column width="50%"}
```{r}
data.frame(`my numbers`, 
           fruits)
```
:::

::: {.column width="50%"}
```{r}
tibble(`my numbers`, 
       fruits)
```
:::
:::

Spot the differences!

## Import dataset (button)

Using the Import Dataset dialog in RStudio

![](images/import_dataset.png){fig-align="center"}

we can import files stored locally or online in the following formats:

-   `.txt`/`.csv` via `read_delim`/`read_csv` from **readr**.
-   `.xlsx` via `read_excel` from **readxl**.
-   `.sav/.por` , `.sas7bdat` and `.dta` via `read_spss`, `read_sas` and `read_stata` respectively from **haven**.

Most of these functions also allow files to be compressed, e.g. as `.zip`.

## File names and paths and project structure

It's REALLY important to have good file names and paths, and a good project structure.

I leave you in the extremely capable hand of Danielle Navarro to take you thoroughly through best practices:

<https://djnavarro.net/slides-project-structure/#1>

I also HIGHLY recommend you check out the [**here**](https://here.r-lib.org){target="_blank"} package, which enables easy file referencing in [project-oriented workflows](https://rstats.wtf/project-oriented-workflow.html){target="_blank"}.

## Import data (code)

The **rio** package provides a common interface to the functions used by *Import Dataset* as well as many others.

The data format is automatically recognised from the file extension. To read the data in as a tibble, we use the setclass argument.

```{r}
#| eval: false
library(rio)
penguins_lter <- import("data/penguins_lter.csv")
penguins_lter_tbl <- import("data/penguins_lter.csv", setclass = "tibble")
```

See `?rio` for the underlying functions used for each format and the corresponding optional arguments, e.g. the skip argument to `read_excel` to skip a certain number of rows.

## Import data demo

Show both button (in Environment and from the file itself) and code

- From file

  - `data/penguins_lter.csv`

- From URL 

  - [<https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-08-09/wheels.csv>]{.smaller60}
  
- Your turn!

:::{.notes}
Show right-click on file name in file pane to import that way
Option to View() or not after import
When import wheels from URL, show how to skip column by right-clicking on column header
:::

# Data wrangling {background-color="#552D62"}

## dplyr

The **dplyr** package (part of the tidyverse) provides the following key functions to operate on data frames:

-   `filter()`
-   `arrange()`
-   `select()`
-   `mutate()`
-   `summarise()`   

They all take a data frame as their first argument. The subsequent arguments describe what to do with the data frame. The result is a new data frame.

## Load packages

```{r}
library(dplyr)
library(palmerpenguins)
```

## `filter()`: pick rows based on values of observations.

::: panel-tabset
## Example

:::{.smaller90}
```{r}
filter(penguins, 
       species == "Gentoo", 
       bill_length_mm > 48 & bill_depth_mm > 15, 
       !is.na(sex))
```
:::

## Notes

-   variable names are unquoted

-   building blocks of conditions:

| Building block     | R code                           |
|--------------------|----------------------------------|
| Binary comparisons | `>`, `<`, `==`, `<=`, `>=`, `!=` |
| Logical operators  | or `|`, and `&`, not `!`         |
| Value matching     | e.g. `x %in% 6:9`                |
| Missing indicator  | e.g. `is.na(x)`                  |
:::

## `select()`: select variables (columns) in a dataset

::: panel-tabset
## Example 1

```{r}
select(penguins, bill_length_mm, bill_depth_mm)
```

## Example 2

```{r}
select(penguins, bill_length_mm:body_mass_g)
```

## Example 3

```{r}
select(penguins, starts_with("bill"))
```

## Example 4

```{r}
select(penguins, where(is.numeric))
```

## Note

There are several other selectors. See `?dplyr::select` or [online](https://dplyr.tidyverse.org/reference/select.html){target="_blank"} for further details.
:::

## A note about pipes: `|>` vs `%>%`

Pipes pass what comes before into an argument (by default the first) of what comes after.

Pipes are a powerful tool for clearly expressing a sequence of multiple operations.

::: columns
::: {.column width="50%"}
### `|>`

-   The 'native' pipe, built into base R since v4.1 (May 2021)
-   Improved in v4.2 (April 2022)
:::

::: {.column width="50%"}
### `%>%`

-   Has been around in the **magrittr** package since 2014
-   Used throughout the tidyverse (though that is changing)
:::
:::

## Pipes: similarity

By default, a pipe takes what comes before and pass it to first argument of what comes after.

::: panel-tabset
### Example 1

```{r}
log(2, base = 10)
2 %>% log(base = 10)
2 |> log(base = 10)
```

### Example 2

```{r}
paste("a", "b", "c")
"a" %>% paste("b", "c")
"a" |> paste("b", "c")
```
:::

## Pipes: key difference

So far, so good, but what if we want to pipe into a subsequent argument?

::: panel-tabset
### Example 1

```{r}
log(2, 10) ## don't need to name the argument
10 %>% log(2, .)
10 |> log(2, base = _)
```

### Example 2

```{r}
paste("a", "b", "c")
"b" %>% paste("a", ., "c")
"b" |> paste("a", ..2 = _, "c")
```
:::

Different placeholder (`.` vs `_`) and with native pipe need a named argument

## Pipe keyboard shortcut

There is an RStudio shortcut for the pipe which also puts spaces around it: 

<kbd>Ctrl</kbd>/<kbd title = "Command">⌘</kbd> + <kbd title = "Shift">⇧</kbd> + <kbd>M</kbd>.

This can be set to either `%>%` or `|>` in the RStudio preferences.

Go to Tools -> Global Options -> Code and check/uncheck box for "Use native pipe operator".

## `arrange()`: change the ordering of rows

::: panel-tabset
## Example 1

```{r}
penguins |>
  select(species, sex, flipper_length_mm) |>
  arrange(flipper_length_mm)
```

## Example 2

```{r}
penguins |>
  select(species, sex, flipper_length_mm) |>
  arrange(species, flipper_length_mm)
```

## Example 3

```{r}
penguins |>
  select(species, sex, flipper_length_mm) |>
  arrange(desc(flipper_length_mm))
```
:::

## `mutate()`: create and modify columns

::: panel-tabset
## Example 1

```{r}
penguins |>
  select(bill_length_mm) |>
  mutate(bill_length_mm_sq = bill_length_mm^2)
```

## Example 2

```{r}
penguins |>
  filter(species == "Gentoo") |>
  select(sex, flipper_length_mm) |>
  mutate(size = if_else(flipper_length_mm > 217, "big", "small"))
```

## Example 3

```{r}
penguins |>
  select(bill_length_mm) |>
  filter(!is.na(bill_length_mm)) |>
  mutate(bill_length_mm_cumsum = cumsum(bill_length_mm))
```
:::

## `summarise()`: reduces multiple values down to a single summary

::: panel-tabset
## Example 1

```{r}
penguins |>
  summarise(mean(body_mass_g, na.rm = TRUE))  
```

## Example 2

```{r}
penguins |>
  group_by(species, sex) |>
  filter(!is.na(sex)) |>
  summarise(mean = mean(body_mass_g, na.rm = TRUE)) |>  # give column a name
  ungroup() # best practice after group_by()
```

## Example 3

```{r}
penguins |>
  filter(!is.na(sex)) |>
  summarise(mean = mean(body_mass_g, na.rm = TRUE),
            .by = c(species, sex)) # new in dplyr 1.1.0, note the `.`
```

## Example 4: count

```{r}
penguins |>
  count(species, island)
```

Shortcut for

```{r}
#| eval: false
penguins |>
  summarise(n = n(), .by = c(species, island))
```

:::

::: {{.notes}}
count() and summarise(n = n()) give different orderings  
count() drops zero counts
:::

## Your turn!

- Explore the `wheels` data!

- Be ready to share some of your code after the exercise!

## tidydatatutor.com

[Tidy Data Tutor](https://tidydatatutor.com){target="_blank"} lets you write R and Tidyverse code in your browser and see how your data frame changes at each step of a data analysis pipeline.

DEMO

# End matter {background-color="#552D62"}

## Additional resources

- [RStudio cheatsheets](https://www.rstudio.com/resources/cheatsheets/){target="_blank"}

- [R for data science book](https://r4ds.had.co.nz){target="_blank"}

- [**ferriswheels**](https://github.com/EmilHvitfeldt/ferriswheels){target="_blank"}

## Sources

Material inspired by and remixed from:

-   <https://stat545.com/r-basics.html>
-   <https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/>
-   <https://slides.silviacanelon.com/tour-of-the-tidyverse-v2/>
-   <https://www.heatherturner.net/teaching/zero-to-hero/>
-   <http://adv-r.had.co.nz/Style.html>

## License

Licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target="_blank"}).


```{=html}
<!-- needs to be last chunk of presentation otherwise creates an extra slide -->
<!-- requires Quarto v1.3 -->
<!-- tint80 for border, tint20 for title -->
<!-- this should hopefully no longer be necessary in Quarto 1.4 -->
<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->
<style type="text/css">
div.callout-note {
  border-left-color: #336695 !important;
}

div.callout-note.callout-style-default .callout-title {
  background-color: #CCD9E4 !important;
}

div.callout-caution {
  border-left-color: #AE4240 !important;
}

div.callout-caution.callout-style-default .callout-title {
  background-color: #ebd0cf !important;
}

div.callout-tip {
  border-left-color: #618157 !important;
}

div.callout-tip.callout-style-default .callout-title {
  background-color: #d8e0d5 !important;
}

div.callout-important {
  border-left-color: #775781 !important;
}

div.callout-important.callout-style-default .callout-title {
  background-color: #ddd5e0 !important;
}

div.callout-warning {
  border-left-color: #956133 !important;
}

div.callout-warning.callout-style-default .callout-title {
  background-color: #e4d8cc !important;
}
</style>
```


