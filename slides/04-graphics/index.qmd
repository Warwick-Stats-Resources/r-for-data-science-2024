---
title: Graphs and Tables
subtitle: R for Data Science
author: Heather Turner | Department of Statistics | University of Warwick
title-slide-attributes:
  data-background-color: "#552D62"
date: 2024-03-21
date-format: long
format: 
  warwickpres-revealjs:
    execute:
      echo: true
      code-overflow: wrap
---


## Overview

-   Plots in base R

-   **ggplot2**

-   Tables

## Packages

```{r}
library(ggplot2) # for later in the session
library(palmerpenguins)
```

# Plots in base R {.inverse}

## No frills

Base R graphics are useful for quick, exploratory "no-frills" plots.

(For anything better looking or more complex or where you want more control, use ggplot2)

## Boxplots

::: panel-tabset
## Example 1

```{r}
#| dpi: 120
boxplot(penguins$body_mass_g)
```

## Example 2

```{r}
#| dpi: 120
with(penguins, boxplot(body_mass_g ~ species))
```
:::

:::{.notes}
use with() to avoid using dollar notation
:::

## Histogram/Density

::: panel-tabset
## Histogram

```{r}
#| dpi: 120
hist(penguins$body_mass_g)
```

## Density

```{r}
#| dpi: 120
plot(density(penguins$body_mass_g, na.rm = TRUE))
```
:::

## Scatterplots

::: panel-tabset
## Vectors

```{r}
#| dpi: 120
plot(1:10, 1:10)
```

## Data frame

```{r}
#| dpi: 120
plot(bill_length_mm ~ bill_depth_mm, 
     data = penguins)
```
:::

## Plot methods

Many different objects in R have defined `plot` methods:

```{r}
methods(plot)
```

e.g. if you call `plot` on an object of type `lm`, it will call `plot.lm`

## Linear model diagnostic fits

```{r}
#| dpi: 120
fit <- lm(bill_length_mm ~ bill_depth_mm, 
          data = penguins, subset = species == "Gentoo")

par(mfrow=c(2,2)) # see all four plots together
plot(fit)
```

## Your turn!

From the starting point of `plot(1:10, 1:10)`, experiment with the arguments `type` and `pch`. See `?plot` 

Can you create a plot with triangular points linked by lines?

Can you do the same with the `lines()` function? What are the similarities and differences?

# ggplot2 {background-color="#552D62"}

## Intro to ggplot2

From <https://ggplot2.tidyverse.org>:

> R has several systems for making graphs, but ggplot2 is one of the most elegant and most versatile. ggplot2 implements the **grammar of graphics**, a coherent system for describing and building graphs. With ggplot2, you can do more faster by learning one system and applying it in many places.

From <https://r4ds.had.co.nz/data-visualisation.html>:

> You provide the data, tell ggplot2 how to map variables to aesthetics, what graphical primitives to use, and it takes care of the details.

## ggplot2 usage

-   **ggplot2** is part of the tidyverse.

-   It has been around for over 10 years and is used by hundreds of thousands of people.

-   It can take some getting used to, but is worth the investment to learn properly

## ggplot2 key components

Every ggplot2 plot has three key components:

-   Data (typically in a data frame),

-   A set of aesthetic mappings between variables in the data and visual properties, and

-   At least one layer which describes how to render each observation. Layers are usually created with a `geom_` function.

## Cake!

![Image credit: Tanya Shapiro](images/ggplot-cake.png)

## Initiate with data

Package is **ggplot2** but *function* is `ggplot()`

```{r}
ggplot(penguins)
```

## Add aesthetics

```{r}
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm))
```

## Add points

Layers are added with `+` (not `%>%` or `|>`)

```{r}
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
  geom_point()
```

## Careful what goes in `aes()`

::: columns
::: {.column width="50%"}
```{r}
ggplot(penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm)) +
  geom_point(aes(color = "blue"))
```
:::

::: {.column width="50%"}
```{r}
ggplot(penguins, 
       aes(x = bill_length_mm, 
           y = bill_depth_mm)) +
  geom_point(color = "blue")
```
:::
:::

## When you *do* want to map a colour to data

::: panel-tabset
### plot

![](`r knitr::fig_chunk("bill-species", "png")`){width="80%"}

### code

```{r}
#| label: bill-species
#| fig-show: hide
ggplot(data = penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           group = species)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8)
```

Note that `color` and `shape` are *inside* `aes()` but `size` and `alpha` are *outside*.
:::

:::{.notes}
made points bigger
added transparency as points overlap
:::

## Add additional geoms

::: panel-tabset
### plot

![]( `r knitr::fig_chunk("bill-species-smooth", "png") `){width="80%"}

### code

```{r}
#| label: bill-species-smooth
#| fig-show: hide
ggplot(data = penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           group = species)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  geom_smooth(method = "lm", aes(color = species))
```
:::

## Scales in ggplot2

> Scales in ggplot2 control the mapping from data to aesthetics. They take your data and turn it into something that you can see, like size, colour, position or shape. They also provide the tools that let you interpret the plot: the axes and legends.

Three groups of scales:

-   position scales and axes
-   colour scales and legends
-   scales for other aesthetics

## Add a colour scale

::: panel-tabset
### plot

![]( `r knitr::fig_chunk("bill-species-colour", "png") `){width="80%"}

### code

```{r}
#| label: bill-species-colour
#| fig-show: hide
ggplot(data = penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           group = species)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  geom_smooth(method = "lm", aes(color = species)) +
  scale_color_manual(values = c("darkorange","purple","cyan4"))
```
:::

## Facets

::: panel-tabset
### plot 1

![]( `r knitr::fig_chunk("bill-species-facet", "png") `){width="80%"}

### code 1

```{r}
#| label: bill-species-facet
#| fig-show: hide
ggplot(data = penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           group = species)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  geom_smooth(method = "lm", aes(color = species)) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  facet_wrap(~species)
```

### plot 2

![]( `r knitr::fig_chunk("bill-species-facet-free-x", "png") `){width="80%"}

### code 2

```{r}
#| label: bill-species-facet-free-x
#| fig-show: hide
ggplot(data = penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           group = species)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  geom_smooth(method = "lm", aes(color = species)) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  facet_wrap(~species, scales = "free_x")
```
:::

## Add theme elements

::: panel-tabset
### plot

![]( `r knitr::fig_chunk("bill-species-theme", "png") `){width="80%"}

### code

```{r}
#| label: bill-species-theme
#| fig-show: hide
ggplot(data = penguins,
       aes(x = bill_length_mm,
           y = bill_depth_mm,
           group = species)) +
  geom_point(aes(color = species, 
                 shape = species),
             size = 3,
             alpha = 0.8) +
  geom_smooth(method = "lm", aes(color = species)) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Penguin bill dimensions",
       x = "bill length (mm)",
       y = "bill depth (mm)") +
  theme_minimal() + 
  theme(plot.title.position = "plot",
        text = element_text(size = 20))
```
:::

## Your turn!

Recreate the base R plots from the first part of this session in ggplot2.

You may find the list of available geoms (and their help pages) useful:

<https://ggplot2.tidyverse.org/reference/index.html#layers>

## Boxplot 1

```{r}
ggplot(penguins) +
  geom_boxplot(aes(y = body_mass_g))
```

Notes

-   `aes()` can be defined for the whole plot or in the geom
-   first arguments to `aes()` are `x` and `y` (don't need to name them if using them in that order)

## Boxplot 2

```{r}
ggplot(penguins) +
  geom_boxplot(aes(species, body_mass_g))
```


## Histogram

```{r}
ggplot(penguins) +
  geom_histogram(aes(body_mass_g), 
                 binwidth = 500)
```

## Density

```{r}
ggplot(penguins) +
  geom_density(aes(body_mass_g))
```

## Scatterplot with vectors

```{r}
ggplot(data = NULL, aes(x = 1:10, y = 1:10)) +
  geom_point()
```


## Extensions

See extensions at <https://exts.ggplot2.tidyverse.org/gallery/>

## Inspiration

R can be used to make incredible data visualisations.

Check out the galleries of these data viz practitioners working with `ggplot2`:

-   [Cedric Scherer](https://www.cedricscherer.com/){target="_blank"}

-   [Georgios Karamanis](https://karaman.is){target="_blank"}

-   [Nicole Rennie](https://nrennie.rbind.io){target="_blank"}

Also, #TidyTuesday on Mastodon is a great source for further inspiration

## ggplot2 resources

-   [R for Data Science book](https://r4ds.had.co.nz/index.html): Chapters [3: Data Visualisation](https://r4ds.had.co.nz/data-visualisation.html) and [28: Graphics for Communication](https://r4ds.had.co.nz/graphics-for-communication.html), to get up and running quickly

-   [ggplot2 book](https://ggplot2-book.org/index.html), for an in-depth understanding

-   [Plotting anything with ggplot2 webinar](https://www.youtube.com/watch?v=h29g21z0a68) with Thomas Lin Pederson (one of the main ggplot2 authors)

-   [R graphics cookbook](https://r-graphics.org), a practical guide that provides more than 150 recipes to help you generate high-quality graphs quickly

-   [Cedric Scherer's tutorial](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)

-   [Cedric Scherer's 'Engaging and Beautiful Data Visualizations with ggplot2' workshop](https://posit-conf-2023.github.io/dataviz-ggplot2/)

-   [ggplot2 reference](https://ggplot2.tidyverse.org)

## Data visualisation resources

Books about greating good data viz:

- [Data Visualisation: A practical Introduction by Kieran Healey](https://socviz.co)

- [Fundamental's of Data Visualisation by Claus Wilke](https://clauswilke.com/dataviz/)

# Plots in RStudio  {background-color="#552D62"}

## Viewing and saving plots in RStudio

In RStudio, graphs are displayed in the Plots window. The plot is sized to fit the window and will be rescaled if the size of the window is changed.

Back and forward arrows allow you to navigate through graphs that have been plotted.

Plots can be saved in various formats using the Export drop down menu, which also has an option to copy to the clipboard.

**DEMO**

:::{.notes}
using plots.R
 - show resizing plot window
 - fancy plot big and small
:::

# Tables {background-color="#552D62"}

## Getting started with tables

We're just going to scratch the surface of this today.

We'll be using the **gt** and **gtsummary** packages, but there are many of other.

Here's a good [overview](https://rfortherestofus.com/2019/11/how-to-make-beautiful-tables-in-r/) of many different packages.

## gt

[gt](https://gt.rstudio.com) is an R package to create tables. It provides a **g**rammar of **t**ables.

> The gt philosophy: we can construct a wide variety of useful tables with a cohesive set of table parts. It all begins with table data (be it a tibble or a data frame). You then decide how to compose your gt table with the elements and formatting you need for the task at hand. Finally, the table is rendered by printing it at the console, including it in an R Markdown document, or exporting to a file using gtsave()

## Parts of a gt table

```{r}
#| label: gt-parts
#| echo: false
#| fig-cap: "From <https://gt.rstudio.com>"

knitr::include_graphics("images/gt_parts_of_a_table.svg")
```

## An example

```{r}
#| label: gt-penguins
#| echo: false
#| fig-cap: "From Albert Rapp's [gt book](https://gt.albert-rapp.de)"

knitr::include_graphics("images/gt-penguins.png")
```


## Resources

See the article [Case Study: gtcars](https://gt.rstudio.com/articles/case-study-gtcars.html) for a thorough example of **gt**'s capabilities.

See also Albert Rapp's [book on **gt**](https://gt.albert-rapp.de).


## Guidelines for better tables

Having the technical know-how to code tables is one thing, making them look good and such that the reader can easily read the data is another!

*Highly* recommend this [Tom Mock guide](https://themockup.blog/posts/2020-09-04-10-table-rules-in-r/), based on Jon Schwabish's original. It covers guidelines for making better tables, and shows how to implement them in **gt**. It demonstrates even more of what gt can do than the article on the previous slide.

## gtsummary

[**gtsummary**](http://www.danieldsjoberg.com/gtsummary/) extends the **gt** package and is used for summarising tables and working with statistical model summaries.

## gtsummary example 1: data

```{r}
library(gtsummary)
# make dataset with a few variables to summarize
trial2 <- trial |> select(age, grade, response, trt)

head(trial2)
```


## gtsummary example 1: code

```{r}
# summarize and augment the data
summary_table <- 
  tbl_summary(
    trial2,
    by = trt, # split table by group
    missing = "no" # don't list missing data separately
  )  |> 
  add_n() |> # add column with total number of non-missing observations
  add_p() |> # test for a difference between groups
  modify_header(label = "**Variable**") |> # update the column header
  bold_labels() 
```

## gtsummary example 1: output

```{r}
#| echo: false
summary_table
```

## gtsummary example 2: code

```{r}
mod1 <- glm(response ~ trt + age + grade, trial, family = binomial)

regression_tab <- tbl_regression(mod1, exponentiate = TRUE)
```


## gtsummary example 2: output

```{r}
#| echo: false
regression_tab
```

## Table inspiration

The winners of the RStudio Table Contest

- [2022](https://posit.co/blog/winners-of-the-2022-table-contest/) 

- [2021](https://posit.co/blog/winners-of-the-2021-table-contest/)

- [2020](https://www.rstudio.com/blog/winners-of-the-2020-rstudio-table-contest/), also has links to tutorials


# End matter {.inverse}


## License

Licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License ([CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/){target="_blank"}).


```{=html}
<!-- needs to be last chunk of presentation otherwise creates an extra slide -->
<!-- requires Quarto v1.3 -->
<!-- tint80 for border, tint20 for title -->
<!-- this should hopefully no longer be necessary in Quarto 1.4 -->
<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->
<style type="text/css">
div.callout-note {
  border-left-color: #336695 !important;
}

div.callout-note.callout-style-default .callout-title {
  background-color: #CCD9E4 !important;
}

div.callout-caution {
  border-left-color: #AE4240 !important;
}

div.callout-caution.callout-style-default .callout-title {
  background-color: #ebd0cf !important;
}

div.callout-tip {
  border-left-color: #618157 !important;
}

div.callout-tip.callout-style-default .callout-title {
  background-color: #d8e0d5 !important;
}

div.callout-important {
  border-left-color: #775781 !important;
}

div.callout-important.callout-style-default .callout-title {
  background-color: #ddd5e0 !important;
}

div.callout-warning {
  border-left-color: #956133 !important;
}

div.callout-warning.callout-style-default .callout-title {
  background-color: #e4d8cc !important;
}
</style>
```


